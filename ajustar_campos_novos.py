from datetime import datetime
from configuracao.conexao import consultar, executar
from configuracao.funcao import validar_lote
import requests
import json
from configuracao.conexao import AUTORIZACAO, ACCESSUSER, TOKENUSER


validar = True

if validar:
    validar_lote('historico-matricula')
else:
    consulta = consultar("""select 		hf.num_cp,		300 as sistema,        'historico-matricula' as tipo_registro,         funcionarios.i_entidades as chave_dsk1,        funcionarios.i_funcionarios as chave_dsk2,        inicioVigencia as chave_dsk3,        dateformat(inicioVigencia,'yyyy-mm-dd') as chave_dsk33,        id = bethadba.dbf_get_id_gerado(sistema , 'historico-matricula/resumido',  dateformat(inicioVigencia,'yyyy-mm-dd 00:00:00'), string(chave_dsk2), string(codigoMatriculaDigitoVerificador), 'FUNCIONARIO'),        tipo = 'FUNCIONARIO',                dataAlteracao = tabAlt.dataAlteracao,        origemHistorico = tabAlt.origemHistorico,        dataInicioContrato = funcionarios.dt_admissao,        inicioVigencia = dateformat(dataAlteracao,'yyyy-mm-dd hh:mm:ss'),           codigoMatriculaNumero = if(select ctr_contrato_matric from bethadba.parametros_folha) = 'S' then string(left(funcionarios.i_funcionarios,length(funcionarios.i_funcionarios)-(select digitos_matric from bethadba.parametros_folha))) else string(funcionarios.i_funcionarios) endif,         codigoMatriculaContrato = if(select ctr_contrato_matric from bethadba.parametros_folha) = 'S' then string(right(funcionarios.i_funcionarios,(select digitos_matric from bethadba.parametros_folha))) else ' ' endif,         codigoMatriculaDigitoVerificador = funcionarios.dv,        numero = codigoMatriculaNumero,               contrato = codigoMatriculaContrato                    from        bethadba.funcionarios,        bethadba.hist_cargos hc left outer join        bethadba.concursos on hc.i_entidades = concursos.i_entidades and hc.i_concursos = concursos.i_concursos,        bethadba.hist_funcionarios hf,         bethadba.hist_salariais hs left outer join bethadba.niveis on niveis.i_entidades = hs.i_entidades and niveis.i_niveis = hs.i_niveis left outer join         bethadba.planos_salariais on planos_salariais.i_planos_salariais = niveis.i_planos_salariais,       (select  entidade = f.i_entidades,                funcionario = f.i_funcionarios,                dataAlteracao = hf.dt_alteracoes,                origemHistorico = 'FUNCIONARIO'          from bethadba.funcionarios f                join bethadba.hist_funcionarios hf on (f.i_entidades = hf.i_entidades and f.i_funcionarios=hf.i_funcionarios and hf.dt_alteracoes <= isnull((select afast.dt_afastamento                                                                                                                                                            from bethadba.afastamentos afast                                                                                                                                                           where afast.i_entidades = f.i_entidades and                                                                                                                                                                  afast.i_funcionarios = f.i_funcionarios and                                                                                                                                                                  afast.i_tipos_afast = (select tipos_afast.i_tipos_afast                                                                                                                                                                                          from bethadba.tipos_afast                                                                                                                                                                                          where tipos_afast.i_tipos_afast = afast.i_tipos_afast and                                                                                                                                                                                               tipos_afast.classif = 9)),date('2999-12-31')))          union all         select entidade=f.i_entidades,                funcionario=f.i_funcionarios,                dataAlteracao = hc.dt_alteracoes ,                origemHistorico = 'CARGO'           from bethadba.funcionarios f                 join bethadba.hist_cargos hc on (f.i_entidades = hc.i_entidades and f.i_funcionarios = hc.i_funcionarios and hc.dt_alteracoes <= isnull((select afast.dt_afastamento                                                                                                                                                           from bethadba.afastamentos afast                                                                                                                                                          where afast.i_entidades = f.i_entidades and                                                                                                                                                                 afast.i_funcionarios = f.i_funcionarios and                                                                                                                                                                 afast.i_tipos_afast = (select tipos_afast.i_tipos_afast                                                                                                                                                                                         from bethadba.tipos_afast                                                                                                                                                                                         where tipos_afast.i_tipos_afast = afast.i_tipos_afast and                                                                                                                                                                                               tipos_afast.classif = 9)),date('2999-12-31')))            where not exists( select distinct 1                              from bethadba.hist_funcionarios hf                              where hf.i_entidades = hc.i_entidades and                                    hf.i_funcionarios= hc.i_funcionarios and                                    hf.dt_alteracoes = hc.dt_alteracoes)         union all         select entidade=f.i_entidades,                funcionario=f.i_funcionarios,                dataAlteracao = hs.dt_alteracoes,                origemHistorico = 'SALARIO'            from bethadba.funcionarios f                 join bethadba.hist_salariais hs on (f.i_entidades=hs.i_entidades and f.i_funcionarios=hs.i_funcionarios and hs.dt_alteracoes <= isnull((select afast.dt_afastamento                                                                                                                                                          from bethadba.afastamentos afast                                                                                                                                                         where afast.i_entidades = f.i_entidades and                                                                                                                                                                afast.i_funcionarios = f.i_funcionarios and                                                                                                                                                                afast.i_tipos_afast = (select tipos_afast.i_tipos_afast                                                                                                                                                                                        from bethadba.tipos_afast                                                                                                                                                                                        where tipos_afast.i_tipos_afast = afast.i_tipos_afast and                                                                                                                                                                                              tipos_afast.classif = 9)),date('2999-12-31')))          where not exists( select distinct 1                              from bethadba.hist_funcionarios hf                              where hf.i_entidades = hs.i_entidades and                                    hf.i_funcionarios= hs.i_funcionarios and                                    hf.dt_alteracoes = hs.dt_alteracoes) and                                   not exists( select distinct 1                                                 from bethadba.hist_cargos hc                                                 where hs.i_entidades = hc.i_entidades and                                                      hs.i_funcionarios= hc.i_funcionarios and                                                       hs.dt_alteracoes = hc.dt_alteracoes)) as tabAlt,        bethadba.pessoas left outer join        bethadba.pessoas_fisicas on (pessoas.i_pessoas = pessoas_fisicas.i_pessoas),        bethadba.cargos,        bethadba.tipos_cargos,        bethadba.cargos_compl,        bethadba.vinculos          where tipos_cargos.i_tipos_cargos = cargos.i_tipos_cargos and         cargos_compl.i_cargos = cargos.i_cargos and        cargos_compl.i_entidades = cargos.i_entidades and        cargos.i_cargos = hc.i_cargos and        cargos.i_entidades = hc.i_entidades and        pessoas.i_pessoas = funcionarios.i_pessoas and        vinculos.categoria_esocial <> 901 and        vinculos.i_vinculos = hf.i_vinculos and                hs.dt_alteracoes = bethadba.dbf_GetDataHisSal(funcionarios.i_entidades, funcionarios.i_funcionarios, dataAlteracao) and         hs.i_funcionarios = funcionarios.i_funcionarios and         hs.i_entidades = funcionarios.i_entidades and        hf.dt_alteracoes = bethadba.dbf_GetDataHisFun(funcionarios.i_entidades, funcionarios.i_funcionarios, dataAlteracao) and         hf.i_funcionarios = funcionarios.i_funcionarios and          hf.i_entidades = funcionarios.i_entidades and        hc.dt_alteracoes = bethadba.dbf_GetDataHisCar(funcionarios.i_entidades, funcionarios.i_funcionarios, dataAlteracao) and       hc.i_funcionarios = funcionarios.i_funcionarios and         hc.i_entidades = funcionarios.i_entidades and        tabAlt.entidade = funcionarios.i_entidades and        tabAlt.funcionario = funcionarios.i_funcionarios and        not exists(select 1 from bethadba.funcionarios_prop_adic                     where funcionarios_prop_adic.i_entidades = funcionarios.i_entidades                      and funcionarios_prop_adic.i_funcionarios = funcionarios.i_funcionarios                        and funcionarios_prop_adic.i_caracteristicas = 100) and        funcionarios.tipo_func = 'F'  and funcionarios.i_entidades not in (1,6,7) and id is not null and hf.num_cp is not null and bethadba.dbf_get_situacao_registro(sistema, tipo_registro, chave_dsk1, chave_dsk2) in (5,3) order by chave_dsk1, chave_dsk2, dataAlteracao desc""")

    contador = 0
    dados = []
    for i in consulta:
        dados.append({
            "idGerado": i['id'],
            "conteudo": {
                "id": i['id'],
                "numeroCartaoPonto": i['num_cp'],
                "tipo": "FUNCIONARIO"
            }
        })
        contador+=1
        if contador % 100 == 0 or contador == len(consulta):
            url = "https://pessoal.betha.cloud/service-layer/v1/api/historico-matricula/"

            payload = json.dumps(dados)
            headers = {
                'Authorization': AUTORIZACAO,
                'Content-Type': 'application/json'
            }

            response = requests.request("POST", url, headers=headers, data=payload)
            response = response.json()
            dados =[]
            if 'id' in response and response['id'] is not None:
                print(f"\r Enviado {contador}/{len(consulta)}",end="")
                executar(f"""INSERT INTO bethadba.controle_migracao_lotes
                         (sistema, tipo_registro, data_hora_env, usuario, url_consulta, status,
                         id_lote) VALUES
                         (300, 'historico-matricula', '{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}',
                         'betha-migracao', 'https://pessoal.cloud.betha.com.br/service-layer/v1/api/lote/lotes/{response['id']}', 1, '{response['id']}')""")